// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CowpayFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVKit
import Combine
import CommonCrypto
@_exported import CowpayFramework
import Dispatch
import Foundation
import MobileCoreServices
import SafariServices
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
extension CowpayFramework.Request {
  public static let didResumeNotification: Foundation.Notification.Name
  public static let didSuspendNotification: Foundation.Notification.Name
  public static let didCancelNotification: Foundation.Notification.Name
  public static let didFinishNotification: Foundation.Notification.Name
  public static let didResumeTaskNotification: Foundation.Notification.Name
  public static let didSuspendTaskNotification: Foundation.Notification.Name
  public static let didCancelTaskNotification: Foundation.Notification.Name
  public static let didCompleteTaskNotification: Foundation.Notification.Name
}
extension Foundation.Notification {
  public var request: CowpayFramework.Request? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AlamofireNotifications : CowpayFramework.EventMonitor {
  final public func requestDidResume(_ request: CowpayFramework.Request)
  final public func requestDidSuspend(_ request: CowpayFramework.Request)
  final public func requestDidCancel(_ request: CowpayFramework.Request)
  final public func requestDidFinish(_ request: CowpayFramework.Request)
  final public func request(_ request: CowpayFramework.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func request(_ request: CowpayFramework.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func request(_ request: CowpayFramework.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: CowpayFramework.Request, didCompleteTask task: Foundation.URLSessionTask, with error: CowpayFramework.AFError?)
  @objc deinit
}
public protocol CachedResponseHandler {
  func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
public struct ResponseCacher {
  public enum Behavior {
    case cache
    case doNotCache
    case modify((Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)
  }
  public static let cache: CowpayFramework.ResponseCacher
  public static let doNotCache: CowpayFramework.ResponseCacher
  public let behavior: CowpayFramework.ResponseCacher.Behavior
  public init(behavior: CowpayFramework.ResponseCacher.Behavior)
}
extension CowpayFramework.ResponseCacher : CowpayFramework.CachedResponseHandler {
  public func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
public class CowPayInitializer {
  public init()
  public func initSDK(token: Swift.String, merchantCode: Swift.String, haskey: Swift.String, enviroment: CowpayFramework.Enviroment, with lang: CowpayFramework.Language)
  public func setPaymentMethodAvailability(arr: [CowpayFramework.CowpaySDKPaymentMethod] = [])
  public func launchSDKView(paymentInfo: CowpayFramework.PaymentInfo, callback: CowpayFramework.CowpayCallback, window: UIKit.UIWindow)
  @objc deinit
}
public let AF: CowpayFramework.Session
extension Foundation.URLSessionConfiguration : CowpayFramework.AlamofireExtended {
  public typealias ExtendedType = Foundation.URLSessionConfiguration
}
extension CowpayFramework.AlamofireExtension where ExtendedType : Foundation.URLSessionConfiguration {
  public static var `default`: Foundation.URLSessionConfiguration {
    get
  }
}
open class MultipartFormData {
  public static let encodingMemoryThreshold: Swift.UInt64
  open var contentType: Swift.String {
    get
    set
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  final public let boundary: Swift.String
  public init(fileManager: Foundation.FileManager = .default, boundary: Swift.String? = nil)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: CowpayFramework.HTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ServiceApi {
  @objc deinit
}
public protocol RequestAdapter {
  func adapt(_ urlRequest: Foundation.URLRequest, for session: CowpayFramework.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
}
public enum RetryResult {
  case retry
  case retryWithDelay(Foundation.TimeInterval)
  case doNotRetry
  case doNotRetryWithError(Swift.Error)
}
public protocol RequestRetrier {
  func retry(_ request: CowpayFramework.Request, for session: CowpayFramework.Session, dueTo error: Swift.Error, completion: @escaping (CowpayFramework.RetryResult) -> Swift.Void)
}
public protocol RequestInterceptor : CowpayFramework.RequestAdapter, CowpayFramework.RequestRetrier {
}
extension CowpayFramework.RequestInterceptor {
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: CowpayFramework.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  public func retry(_ request: CowpayFramework.Request, for session: CowpayFramework.Session, dueTo error: Swift.Error, completion: @escaping (CowpayFramework.RetryResult) -> Swift.Void)
}
public typealias AdaptHandler = (Foundation.URLRequest, CowpayFramework.Session, _ completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void) -> Swift.Void
public typealias RetryHandler = (CowpayFramework.Request, CowpayFramework.Session, Swift.Error, _ completion: @escaping (CowpayFramework.RetryResult) -> Swift.Void) -> Swift.Void
open class Adapter : CowpayFramework.RequestInterceptor {
  public init(_ adaptHandler: @escaping CowpayFramework.AdaptHandler)
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: CowpayFramework.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  @objc deinit
}
open class Retrier : CowpayFramework.RequestInterceptor {
  public init(_ retryHandler: @escaping CowpayFramework.RetryHandler)
  open func retry(_ request: CowpayFramework.Request, for session: CowpayFramework.Session, dueTo error: Swift.Error, completion: @escaping (CowpayFramework.RetryResult) -> Swift.Void)
  @objc deinit
}
open class Interceptor : CowpayFramework.RequestInterceptor {
  final public let adapters: [CowpayFramework.RequestAdapter]
  final public let retriers: [CowpayFramework.RequestRetrier]
  public init(adaptHandler: @escaping CowpayFramework.AdaptHandler, retryHandler: @escaping CowpayFramework.RetryHandler)
  public init(adapter: CowpayFramework.RequestAdapter, retrier: CowpayFramework.RequestRetrier)
  public init(adapters: [CowpayFramework.RequestAdapter] = [], retriers: [CowpayFramework.RequestRetrier] = [], interceptors: [CowpayFramework.RequestInterceptor] = [])
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: CowpayFramework.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  open func retry(_ request: CowpayFramework.Request, for session: CowpayFramework.Session, dueTo error: Swift.Error, completion: @escaping (CowpayFramework.RetryResult) -> Swift.Void)
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var size: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var width: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var height: CoreFoundation.CGFloat {
    get
    set
  }
}
public protocol DataResponseSerializerProtocol {
  associatedtype SerializedObject
  func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Self.SerializedObject
}
public protocol DownloadResponseSerializerProtocol {
  associatedtype SerializedObject
  func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Self.SerializedObject
}
public protocol ResponseSerializer : CowpayFramework.DataResponseSerializerProtocol, CowpayFramework.DownloadResponseSerializerProtocol {
  var dataPreprocessor: CowpayFramework.DataPreprocessor { get }
  var emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> { get }
  var emptyResponseCodes: Swift.Set<Swift.Int> { get }
}
public protocol DataPreprocessor {
  func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct PassthroughPreprocessor : CowpayFramework.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct GoogleXSSIPreprocessor : CowpayFramework.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
extension CowpayFramework.ResponseSerializer {
  public static var defaultDataPreprocessor: CowpayFramework.DataPreprocessor {
    get
  }
  public static var defaultEmptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> {
    get
  }
  public static var defaultEmptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public var dataPreprocessor: CowpayFramework.DataPreprocessor {
    get
  }
  public var emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> {
    get
  }
  public var emptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public func requestAllowsEmptyResponseData(_ request: Foundation.URLRequest?) -> Swift.Bool?
  public func responseAllowsEmptyResponseData(_ response: Foundation.HTTPURLResponse?) -> Swift.Bool?
  public func emptyResponseAllowed(forRequest request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?) -> Swift.Bool
}
extension CowpayFramework.DownloadResponseSerializerProtocol where Self : CowpayFramework.DataResponseSerializerProtocol {
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Self.SerializedObject
}
extension CowpayFramework.DataRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (CowpayFramework.AFDataResponse<Foundation.Data?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (CowpayFramework.AFDataResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : CowpayFramework.DataResponseSerializerProtocol
}
extension CowpayFramework.DownloadRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (CowpayFramework.AFDownloadResponse<Foundation.URL?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (CowpayFramework.AFDownloadResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : CowpayFramework.DownloadResponseSerializerProtocol
}
public struct URLResponseSerializer : CowpayFramework.DownloadResponseSerializerProtocol {
  public init()
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Foundation.URL
  public typealias SerializedObject = Foundation.URL
}
extension CowpayFramework.DownloadRequest {
  @discardableResult
  public func responseURL(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (CowpayFramework.AFDownloadResponse<Foundation.URL>) -> Swift.Void) -> Self
}
final public class DataResponseSerializer : CowpayFramework.ResponseSerializer {
  final public let dataPreprocessor: CowpayFramework.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod>
  public init(dataPreprocessor: CowpayFramework.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
  @objc deinit
}
extension CowpayFramework.DataRequest {
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: CowpayFramework.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (CowpayFramework.AFDataResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension CowpayFramework.DownloadRequest {
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: CowpayFramework.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (CowpayFramework.AFDownloadResponse<Foundation.Data>) -> Swift.Void) -> Self
}
final public class StringResponseSerializer : CowpayFramework.ResponseSerializer {
  final public let dataPreprocessor: CowpayFramework.DataPreprocessor
  final public let encoding: Swift.String.Encoding?
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod>
  public init(dataPreprocessor: CowpayFramework.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Swift.String
  public typealias SerializedObject = Swift.String
  @objc deinit
}
extension CowpayFramework.DataRequest {
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: CowpayFramework.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (CowpayFramework.AFDataResponse<Swift.String>) -> Swift.Void) -> Self
}
extension CowpayFramework.DownloadRequest {
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: CowpayFramework.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (CowpayFramework.AFDownloadResponse<Swift.String>) -> Swift.Void) -> Self
}
final public class JSONResponseSerializer : CowpayFramework.ResponseSerializer {
  final public let dataPreprocessor: CowpayFramework.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod>
  final public let options: Foundation.JSONSerialization.ReadingOptions
  public init(dataPreprocessor: CowpayFramework.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Any
  public typealias SerializedObject = Any
  @objc deinit
}
extension CowpayFramework.DataRequest {
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: CowpayFramework.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (CowpayFramework.AFDataResponse<Any>) -> Swift.Void) -> Self
}
extension CowpayFramework.DownloadRequest {
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: CowpayFramework.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (CowpayFramework.AFDownloadResponse<Any>) -> Swift.Void) -> Self
}
public protocol EmptyResponse {
  static func emptyValue() -> Self
}
public struct Empty : Swift.Codable {
  public static let value: CowpayFramework.Empty
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension CowpayFramework.Empty : CowpayFramework.EmptyResponse {
  public static func emptyValue() -> CowpayFramework.Empty
}
public protocol DataDecoder {
  func decode<D>(_ type: D.Type, from data: Foundation.Data) throws -> D where D : Swift.Decodable
}
extension Foundation.JSONDecoder : CowpayFramework.DataDecoder {
}
extension Foundation.PropertyListDecoder : CowpayFramework.DataDecoder {
}
final public class DecodableResponseSerializer<T> : CowpayFramework.ResponseSerializer where T : Swift.Decodable {
  final public let dataPreprocessor: CowpayFramework.DataPreprocessor
  final public let decoder: CowpayFramework.DataDecoder
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod>
  public init(dataPreprocessor: CowpayFramework.DataPreprocessor = DecodableResponseSerializer.defaultDataPreprocessor, decoder: CowpayFramework.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> = DecodableResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> T
  public typealias SerializedObject = T
  @objc deinit
}
extension CowpayFramework.DataRequest {
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: CowpayFramework.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: CowpayFramework.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (CowpayFramework.AFDataResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
}
extension CowpayFramework.DownloadRequest {
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: CowpayFramework.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: CowpayFramework.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (CowpayFramework.AFDownloadResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
}
public protocol DataStreamSerializer {
  associatedtype SerializedObject
  func serialize(_ data: Foundation.Data) throws -> Self.SerializedObject
}
public struct DecodableStreamSerializer<T> : CowpayFramework.DataStreamSerializer where T : Swift.Decodable {
  public let decoder: CowpayFramework.DataDecoder
  public let dataPreprocessor: CowpayFramework.DataPreprocessor
  public init(decoder: CowpayFramework.DataDecoder = JSONDecoder(), dataPreprocessor: CowpayFramework.DataPreprocessor = PassthroughPreprocessor())
  public func serialize(_ data: Foundation.Data) throws -> T
  public typealias SerializedObject = T
}
public struct PassthroughStreamSerializer : CowpayFramework.DataStreamSerializer {
  public func serialize(_ data: Foundation.Data) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
}
public struct StringStreamSerializer : CowpayFramework.DataStreamSerializer {
  public func serialize(_ data: Foundation.Data) throws -> Swift.String
  public typealias SerializedObject = Swift.String
}
extension CowpayFramework.DataStreamRequest {
  @discardableResult
  final public func responseStream(on queue: Dispatch.DispatchQueue = .main, stream: @escaping CowpayFramework.DataStreamRequest.Handler<Foundation.Data, Swift.Never>) -> Self
  @discardableResult
  final public func responseStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main, stream: @escaping CowpayFramework.DataStreamRequest.Handler<Serializer.SerializedObject, CowpayFramework.AFError>) -> Self where Serializer : CowpayFramework.DataStreamSerializer
  @discardableResult
  final public func responseStreamString(on queue: Dispatch.DispatchQueue = .main, stream: @escaping CowpayFramework.DataStreamRequest.Handler<Swift.String, Swift.Never>) -> Self
  @discardableResult
  final public func responseStreamDecodable<T>(of type: T.Type = T.self, on queue: Dispatch.DispatchQueue = .main, using decoder: CowpayFramework.DataDecoder = JSONDecoder(), preprocessor: CowpayFramework.DataPreprocessor = PassthroughPreprocessor(), stream: @escaping CowpayFramework.DataStreamRequest.Handler<T, CowpayFramework.AFError>) -> Self where T : Swift.Decodable
}
public struct Card {
  public var paymentGatewayReferenceId: Swift.String
  public var cowpayReferenceId: Swift.String
}
public protocol EventMonitor {
  var queue: Dispatch.DispatchQueue { get }
  func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  func request(_ request: CowpayFramework.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: CowpayFramework.Request, didFailToCreateURLRequestWithError error: CowpayFramework.AFError)
  func request(_ request: CowpayFramework.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  func request(_ request: CowpayFramework.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: CowpayFramework.AFError)
  func request(_ request: CowpayFramework.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: CowpayFramework.Request, didCreateTask task: Foundation.URLSessionTask)
  func request(_ request: CowpayFramework.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  func request(_ request: CowpayFramework.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: CowpayFramework.AFError)
  func request(_ request: CowpayFramework.Request, didCompleteTask task: Foundation.URLSessionTask, with error: CowpayFramework.AFError?)
  func requestIsRetrying(_ request: CowpayFramework.Request)
  func requestDidFinish(_ request: CowpayFramework.Request)
  func requestDidResume(_ request: CowpayFramework.Request)
  func request(_ request: CowpayFramework.Request, didResumeTask task: Foundation.URLSessionTask)
  func requestDidSuspend(_ request: CowpayFramework.Request)
  func request(_ request: CowpayFramework.Request, didSuspendTask task: Foundation.URLSessionTask)
  func requestDidCancel(_ request: CowpayFramework.Request)
  func request(_ request: CowpayFramework.Request, didCancelTask task: Foundation.URLSessionTask)
  func request(_ request: CowpayFramework.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: CowpayFramework.Request.ValidationResult)
  func request(_ request: CowpayFramework.DataRequest, didParseResponse response: CowpayFramework.DataResponse<Foundation.Data?, CowpayFramework.AFError>)
  func request<Value>(_ request: CowpayFramework.DataRequest, didParseResponse response: CowpayFramework.DataResponse<Value, CowpayFramework.AFError>)
  func request(_ request: CowpayFramework.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: CowpayFramework.Request.ValidationResult)
  func request<Value>(_ request: CowpayFramework.DataStreamRequest, didParseStream result: Swift.Result<Value, CowpayFramework.AFError>)
  func request(_ request: CowpayFramework.UploadRequest, didCreateUploadable uploadable: CowpayFramework.UploadRequest.Uploadable)
  func request(_ request: CowpayFramework.UploadRequest, didFailToCreateUploadableWithError error: CowpayFramework.AFError)
  func request(_ request: CowpayFramework.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  func request(_ request: CowpayFramework.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, CowpayFramework.AFError>)
  func request(_ request: CowpayFramework.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  func request(_ request: CowpayFramework.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: CowpayFramework.Request.ValidationResult)
  func request(_ request: CowpayFramework.DownloadRequest, didParseResponse response: CowpayFramework.DownloadResponse<Foundation.URL?, CowpayFramework.AFError>)
  func request<Value>(_ request: CowpayFramework.DownloadRequest, didParseResponse response: CowpayFramework.DownloadResponse<Value, CowpayFramework.AFError>)
}
extension CowpayFramework.EventMonitor {
  public var queue: Dispatch.DispatchQueue {
    get
  }
  public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  public func request(_ request: CowpayFramework.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: CowpayFramework.Request, didFailToCreateURLRequestWithError error: CowpayFramework.AFError)
  public func request(_ request: CowpayFramework.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  public func request(_ request: CowpayFramework.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: CowpayFramework.AFError)
  public func request(_ request: CowpayFramework.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: CowpayFramework.Request, didCreateTask task: Foundation.URLSessionTask)
  public func request(_ request: CowpayFramework.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  public func request(_ request: CowpayFramework.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: CowpayFramework.AFError)
  public func request(_ request: CowpayFramework.Request, didCompleteTask task: Foundation.URLSessionTask, with error: CowpayFramework.AFError?)
  public func requestIsRetrying(_ request: CowpayFramework.Request)
  public func requestDidFinish(_ request: CowpayFramework.Request)
  public func requestDidResume(_ request: CowpayFramework.Request)
  public func request(_ request: CowpayFramework.Request, didResumeTask task: Foundation.URLSessionTask)
  public func requestDidSuspend(_ request: CowpayFramework.Request)
  public func request(_ request: CowpayFramework.Request, didSuspendTask task: Foundation.URLSessionTask)
  public func requestDidCancel(_ request: CowpayFramework.Request)
  public func request(_ request: CowpayFramework.Request, didCancelTask task: Foundation.URLSessionTask)
  public func request(_ request: CowpayFramework.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: CowpayFramework.Request.ValidationResult)
  public func request(_ request: CowpayFramework.DataRequest, didParseResponse response: CowpayFramework.DataResponse<Foundation.Data?, CowpayFramework.AFError>)
  public func request<Value>(_ request: CowpayFramework.DataRequest, didParseResponse response: CowpayFramework.DataResponse<Value, CowpayFramework.AFError>)
  public func request(_ request: CowpayFramework.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: CowpayFramework.Request.ValidationResult)
  public func request<Value>(_ request: CowpayFramework.DataStreamRequest, didParseStream result: Swift.Result<Value, CowpayFramework.AFError>)
  public func request(_ request: CowpayFramework.UploadRequest, didCreateUploadable uploadable: CowpayFramework.UploadRequest.Uploadable)
  public func request(_ request: CowpayFramework.UploadRequest, didFailToCreateUploadableWithError error: CowpayFramework.AFError)
  public func request(_ request: CowpayFramework.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  public func request(_ request: CowpayFramework.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, CowpayFramework.AFError>)
  public func request(_ request: CowpayFramework.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  public func request(_ request: CowpayFramework.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: CowpayFramework.Request.ValidationResult)
  public func request(_ request: CowpayFramework.DownloadRequest, didParseResponse response: CowpayFramework.DownloadResponse<Foundation.URL?, CowpayFramework.AFError>)
  public func request<Value>(_ request: CowpayFramework.DownloadRequest, didParseResponse response: CowpayFramework.DownloadResponse<Value, CowpayFramework.AFError>)
}
@_hasMissingDesignatedInitializers final public class CompositeEventMonitor : CowpayFramework.EventMonitor {
  final public let queue: Dispatch.DispatchQueue
  final public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  final public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  final public func request(_ request: CowpayFramework.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: CowpayFramework.Request, didFailToCreateURLRequestWithError error: CowpayFramework.AFError)
  final public func request(_ request: CowpayFramework.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  final public func request(_ request: CowpayFramework.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: CowpayFramework.AFError)
  final public func request(_ request: CowpayFramework.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: CowpayFramework.Request, didCreateTask task: Foundation.URLSessionTask)
  final public func request(_ request: CowpayFramework.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  final public func request(_ request: CowpayFramework.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: CowpayFramework.AFError)
  final public func request(_ request: CowpayFramework.Request, didCompleteTask task: Foundation.URLSessionTask, with error: CowpayFramework.AFError?)
  final public func requestIsRetrying(_ request: CowpayFramework.Request)
  final public func requestDidFinish(_ request: CowpayFramework.Request)
  final public func requestDidResume(_ request: CowpayFramework.Request)
  final public func request(_ request: CowpayFramework.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func requestDidSuspend(_ request: CowpayFramework.Request)
  final public func request(_ request: CowpayFramework.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func requestDidCancel(_ request: CowpayFramework.Request)
  final public func request(_ request: CowpayFramework.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: CowpayFramework.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: CowpayFramework.Request.ValidationResult)
  final public func request(_ request: CowpayFramework.DataRequest, didParseResponse response: CowpayFramework.DataResponse<Foundation.Data?, CowpayFramework.AFError>)
  final public func request<Value>(_ request: CowpayFramework.DataRequest, didParseResponse response: CowpayFramework.DataResponse<Value, CowpayFramework.AFError>)
  final public func request(_ request: CowpayFramework.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: CowpayFramework.Request.ValidationResult)
  final public func request<Value>(_ request: CowpayFramework.DataStreamRequest, didParseStream result: Swift.Result<Value, CowpayFramework.AFError>)
  final public func request(_ request: CowpayFramework.UploadRequest, didCreateUploadable uploadable: CowpayFramework.UploadRequest.Uploadable)
  final public func request(_ request: CowpayFramework.UploadRequest, didFailToCreateUploadableWithError error: CowpayFramework.AFError)
  final public func request(_ request: CowpayFramework.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  final public func request(_ request: CowpayFramework.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, CowpayFramework.AFError>)
  final public func request(_ request: CowpayFramework.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  final public func request(_ request: CowpayFramework.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: CowpayFramework.Request.ValidationResult)
  final public func request(_ request: CowpayFramework.DownloadRequest, didParseResponse response: CowpayFramework.DownloadResponse<Foundation.URL?, CowpayFramework.AFError>)
  final public func request<Value>(_ request: CowpayFramework.DownloadRequest, didParseResponse response: CowpayFramework.DownloadResponse<Value, CowpayFramework.AFError>)
  @objc deinit
}
open class ClosureEventMonitor : CowpayFramework.EventMonitor {
  open var sessionDidBecomeInvalidWithError: ((Foundation.URLSession, Swift.Error?) -> Swift.Void)?
  open var taskDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> Swift.Void)?
  open var taskDidSendBodyData: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var taskNeedNewBodyStream: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var taskWillPerformHTTPRedirection: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest) -> Swift.Void)?
  open var taskDidFinishCollectingMetrics: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var taskDidComplete: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Error?) -> Swift.Void)?
  open var taskIsWaitingForConnectivity: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var dataTaskDidReceiveData: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.Data) -> Swift.Void)?
  open var dataTaskWillCacheResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Swift.Void)?
  open var downloadTaskDidFinishDownloadingToURL: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Foundation.URL) -> Swift.Void)?
  open var downloadTaskDidWriteData: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var downloadTaskDidResumeAtOffset: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var requestDidCreateInitialURLRequest: ((CowpayFramework.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToCreateURLRequestWithError: ((CowpayFramework.Request, CowpayFramework.AFError) -> Swift.Void)?
  open var requestDidAdaptInitialRequestToAdaptedRequest: ((CowpayFramework.Request, Foundation.URLRequest, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToAdaptURLRequestWithError: ((CowpayFramework.Request, Foundation.URLRequest, CowpayFramework.AFError) -> Swift.Void)?
  open var requestDidCreateURLRequest: ((CowpayFramework.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidCreateTask: ((CowpayFramework.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidGatherMetrics: ((CowpayFramework.Request, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var requestDidFailTaskEarlyWithError: ((CowpayFramework.Request, Foundation.URLSessionTask, CowpayFramework.AFError) -> Swift.Void)?
  open var requestDidCompleteTaskWithError: ((CowpayFramework.Request, Foundation.URLSessionTask, CowpayFramework.AFError?) -> Swift.Void)?
  open var requestIsRetrying: ((CowpayFramework.Request) -> Swift.Void)?
  open var requestDidFinish: ((CowpayFramework.Request) -> Swift.Void)?
  open var requestDidResume: ((CowpayFramework.Request) -> Swift.Void)?
  open var requestDidResumeTask: ((CowpayFramework.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidSuspend: ((CowpayFramework.Request) -> Swift.Void)?
  open var requestDidSuspendTask: ((CowpayFramework.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidCancel: ((CowpayFramework.Request) -> Swift.Void)?
  open var requestDidCancelTask: ((CowpayFramework.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidValidateRequestResponseDataWithResult: ((CowpayFramework.DataRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?, CowpayFramework.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseResponse: ((CowpayFramework.DataRequest, CowpayFramework.DataResponse<Foundation.Data?, CowpayFramework.AFError>) -> Swift.Void)?
  open var requestDidValidateRequestResponseWithResult: ((CowpayFramework.DataStreamRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, CowpayFramework.Request.ValidationResult) -> Swift.Void)?
  open var requestDidCreateUploadable: ((CowpayFramework.UploadRequest, CowpayFramework.UploadRequest.Uploadable) -> Swift.Void)?
  open var requestDidFailToCreateUploadableWithError: ((CowpayFramework.UploadRequest, CowpayFramework.AFError) -> Swift.Void)?
  open var requestDidProvideInputStream: ((CowpayFramework.UploadRequest, Foundation.InputStream) -> Swift.Void)?
  open var requestDidFinishDownloadingUsingTaskWithResult: ((CowpayFramework.DownloadRequest, Foundation.URLSessionTask, Swift.Result<Foundation.URL, CowpayFramework.AFError>) -> Swift.Void)?
  open var requestDidCreateDestinationURL: ((CowpayFramework.DownloadRequest, Foundation.URL) -> Swift.Void)?
  open var requestDidValidateRequestResponseFileURLWithResult: ((CowpayFramework.DownloadRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.URL?, CowpayFramework.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseDownloadResponse: ((CowpayFramework.DownloadRequest, CowpayFramework.DownloadResponse<Foundation.URL?, CowpayFramework.AFError>) -> Swift.Void)?
  final public let queue: Dispatch.DispatchQueue
  public init(queue: Dispatch.DispatchQueue = .main)
  open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  open func request(_ request: CowpayFramework.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: CowpayFramework.Request, didFailToCreateURLRequestWithError error: CowpayFramework.AFError)
  open func request(_ request: CowpayFramework.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  open func request(_ request: CowpayFramework.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: CowpayFramework.AFError)
  open func request(_ request: CowpayFramework.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: CowpayFramework.Request, didCreateTask task: Foundation.URLSessionTask)
  open func request(_ request: CowpayFramework.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  open func request(_ request: CowpayFramework.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: CowpayFramework.AFError)
  open func request(_ request: CowpayFramework.Request, didCompleteTask task: Foundation.URLSessionTask, with error: CowpayFramework.AFError?)
  open func requestIsRetrying(_ request: CowpayFramework.Request)
  open func requestDidFinish(_ request: CowpayFramework.Request)
  open func requestDidResume(_ request: CowpayFramework.Request)
  public func request(_ request: CowpayFramework.Request, didResumeTask task: Foundation.URLSessionTask)
  open func requestDidSuspend(_ request: CowpayFramework.Request)
  public func request(_ request: CowpayFramework.Request, didSuspendTask task: Foundation.URLSessionTask)
  open func requestDidCancel(_ request: CowpayFramework.Request)
  public func request(_ request: CowpayFramework.Request, didCancelTask task: Foundation.URLSessionTask)
  open func request(_ request: CowpayFramework.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: CowpayFramework.Request.ValidationResult)
  open func request(_ request: CowpayFramework.DataRequest, didParseResponse response: CowpayFramework.DataResponse<Foundation.Data?, CowpayFramework.AFError>)
  public func request(_ request: CowpayFramework.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: CowpayFramework.Request.ValidationResult)
  open func request(_ request: CowpayFramework.UploadRequest, didCreateUploadable uploadable: CowpayFramework.UploadRequest.Uploadable)
  open func request(_ request: CowpayFramework.UploadRequest, didFailToCreateUploadableWithError error: CowpayFramework.AFError)
  open func request(_ request: CowpayFramework.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  open func request(_ request: CowpayFramework.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, CowpayFramework.AFError>)
  open func request(_ request: CowpayFramework.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  open func request(_ request: CowpayFramework.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: CowpayFramework.Request.ValidationResult)
  open func request(_ request: CowpayFramework.DownloadRequest, didParseResponse response: CowpayFramework.DownloadResponse<Foundation.URL?, CowpayFramework.AFError>)
  @objc deinit
}
public typealias AFDataResponse<Success> = CowpayFramework.DataResponse<Success, CowpayFramework.AFError>
public typealias AFDownloadResponse<Success> = CowpayFramework.DownloadResponse<Success, CowpayFramework.AFError>
public struct DataResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension CowpayFramework.DataResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension CowpayFramework.DataResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> CowpayFramework.DataResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> CowpayFramework.DataResponse<NewSuccess, Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> CowpayFramework.DataResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> CowpayFramework.DataResponse<Success, Swift.Error> where NewFailure : Swift.Error
}
public struct DownloadResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let fileURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, resumeData: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension CowpayFramework.DownloadResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension CowpayFramework.DownloadResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> CowpayFramework.DownloadResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> CowpayFramework.DownloadResponse<NewSuccess, Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> CowpayFramework.DownloadResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> CowpayFramework.DownloadResponse<Success, Swift.Error> where NewFailure : Swift.Error
}
open class ServerTrustManager {
  final public let allHostsMustBeEvaluated: Swift.Bool
  final public let evaluators: [Swift.String : CowpayFramework.ServerTrustEvaluating]
  public init(allHostsMustBeEvaluated: Swift.Bool = true, evaluators: [Swift.String : CowpayFramework.ServerTrustEvaluating])
  open func serverTrustEvaluator(forHost host: Swift.String) throws -> CowpayFramework.ServerTrustEvaluating?
  @objc deinit
}
public protocol ServerTrustEvaluating {
  func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
final public class DefaultTrustEvaluator : CowpayFramework.ServerTrustEvaluating {
  public init(validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class RevocationTrustEvaluator : CowpayFramework.ServerTrustEvaluating {
  public struct Options : Swift.OptionSet {
    public static let crl: CowpayFramework.RevocationTrustEvaluator.Options
    public static let networkAccessDisabled: CowpayFramework.RevocationTrustEvaluator.Options
    public static let ocsp: CowpayFramework.RevocationTrustEvaluator.Options
    public static let preferCRL: CowpayFramework.RevocationTrustEvaluator.Options
    public static let requirePositiveResponse: CowpayFramework.RevocationTrustEvaluator.Options
    public static let any: CowpayFramework.RevocationTrustEvaluator.Options
    public let rawValue: CoreFoundation.CFOptionFlags
    public init(rawValue: CoreFoundation.CFOptionFlags)
    public typealias ArrayLiteralElement = CowpayFramework.RevocationTrustEvaluator.Options
    public typealias Element = CowpayFramework.RevocationTrustEvaluator.Options
    public typealias RawValue = CoreFoundation.CFOptionFlags
  }
  public init(performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true, options: CowpayFramework.RevocationTrustEvaluator.Options = .any)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class PinnedCertificatesTrustEvaluator : CowpayFramework.ServerTrustEvaluating {
  public init(certificates: [Security.SecCertificate] = Bundle.main.af.certificates, acceptSelfSignedCertificates: Swift.Bool = false, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class PublicKeysTrustEvaluator : CowpayFramework.ServerTrustEvaluating {
  public init(keys: [Security.SecKey] = Bundle.main.af.publicKeys, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class CompositeTrustEvaluator : CowpayFramework.ServerTrustEvaluating {
  public init(evaluators: [CowpayFramework.ServerTrustEvaluating])
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
@available(*, deprecated, renamed: "DisabledTrustEvaluator", message: "DisabledEvaluator has been renamed DisabledTrustEvaluator.")
public typealias DisabledEvaluator = CowpayFramework.DisabledTrustEvaluator
final public class DisabledTrustEvaluator : CowpayFramework.ServerTrustEvaluating {
  public init()
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension Swift.Array where Element == CowpayFramework.ServerTrustEvaluating {
  public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
extension Foundation.Bundle : CowpayFramework.AlamofireExtended {
  public typealias ExtendedType = Foundation.Bundle
}
extension CowpayFramework.AlamofireExtension where ExtendedType : Foundation.Bundle {
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
  public func paths(forResourcesOfTypes types: [Swift.String]) -> [Swift.String]
}
extension Security.SecTrust : CowpayFramework.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrust
}
extension CowpayFramework.AlamofireExtension where ExtendedType == Security.SecTrust {
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate(afterApplying policy: Security.SecPolicy) throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate(afterApplying:)")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate(afterApplying:)")
  public func validate(policy: Security.SecPolicy, errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> Swift.Error) throws
  public func apply(policy: Security.SecPolicy) throws -> Security.SecTrust
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate() throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate()")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate()")
  public func validate(errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> Swift.Error) throws
  public func setAnchorCertificates(_ certificates: [Security.SecCertificate]) throws
  public var publicKeys: [Security.SecKey] {
    get
  }
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var certificateData: [Foundation.Data] {
    get
  }
  public func performDefaultValidation(forHost host: Swift.String) throws
  public func performValidation(forHost host: Swift.String) throws
}
extension Security.SecPolicy : CowpayFramework.AlamofireExtended {
  public typealias ExtendedType = Security.SecPolicy
}
extension CowpayFramework.AlamofireExtension where ExtendedType == Security.SecPolicy {
  public static let `default`: Security.SecPolicy
  public static func hostname(_ hostname: Swift.String) -> Security.SecPolicy
  public static func revocation(options: CowpayFramework.RevocationTrustEvaluator.Options) throws -> Security.SecPolicy
}
extension Swift.Array : CowpayFramework.AlamofireExtended {
  public typealias ExtendedType = Swift.Array<Element>
}
extension CowpayFramework.AlamofireExtension where ExtendedType == [Security.SecCertificate] {
  public var data: [Foundation.Data] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
}
extension Security.SecCertificate : CowpayFramework.AlamofireExtended {
  public typealias ExtendedType = Security.SecCertificate
}
extension CowpayFramework.AlamofireExtension where ExtendedType == Security.SecCertificate {
  public var publicKey: Security.SecKey? {
    get
  }
}
extension Swift.Int32 : CowpayFramework.AlamofireExtended {
  public typealias ExtendedType = Swift.Int32
}
extension CowpayFramework.AlamofireExtension where ExtendedType == Swift.Int32 {
  public var isSuccess: Swift.Bool {
    get
  }
}
extension Security.SecTrustResultType : CowpayFramework.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrustResultType
}
extension CowpayFramework.AlamofireExtension where ExtendedType == Security.SecTrustResultType {
  public var isSuccess: Swift.Bool {
    get
  }
}
open class Session {
  public static let `default`: CowpayFramework.Session
  final public let session: Foundation.URLSession
  final public let delegate: CowpayFramework.SessionDelegate
  final public let rootQueue: Dispatch.DispatchQueue
  final public let startRequestsImmediately: Swift.Bool
  final public let requestQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let interceptor: CowpayFramework.RequestInterceptor?
  final public let serverTrustManager: CowpayFramework.ServerTrustManager?
  final public let redirectHandler: CowpayFramework.RedirectHandler?
  final public let cachedResponseHandler: CowpayFramework.CachedResponseHandler?
  final public let eventMonitor: CowpayFramework.CompositeEventMonitor
  final public let defaultEventMonitors: [CowpayFramework.EventMonitor]
  public init(session: Foundation.URLSession, delegate: CowpayFramework.SessionDelegate, rootQueue: Dispatch.DispatchQueue, startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: CowpayFramework.RequestInterceptor? = nil, serverTrustManager: CowpayFramework.ServerTrustManager? = nil, redirectHandler: CowpayFramework.RedirectHandler? = nil, cachedResponseHandler: CowpayFramework.CachedResponseHandler? = nil, eventMonitors: [CowpayFramework.EventMonitor] = [])
  convenience public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.af.default, delegate: CowpayFramework.SessionDelegate = SessionDelegate(), rootQueue: Dispatch.DispatchQueue = DispatchQueue(label: "org.alamofire.session.rootQueue"), startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: CowpayFramework.RequestInterceptor? = nil, serverTrustManager: CowpayFramework.ServerTrustManager? = nil, redirectHandler: CowpayFramework.RedirectHandler? = nil, cachedResponseHandler: CowpayFramework.CachedResponseHandler? = nil, eventMonitors: [CowpayFramework.EventMonitor] = [])
  @objc deinit
  public func withAllRequests(perform action: @escaping (Swift.Set<CowpayFramework.Request>) -> Swift.Void)
  public func cancelAllRequests(completingOnQueue queue: Dispatch.DispatchQueue = .main, completion: (() -> Swift.Void)? = nil)
  public typealias RequestModifier = (inout Foundation.URLRequest) throws -> Swift.Void
  open func request(_ convertible: CowpayFramework.URLConvertible, method: CowpayFramework.HTTPMethod = .get, parameters: CowpayFramework.Parameters? = nil, encoding: CowpayFramework.ParameterEncoding = URLEncoding.default, headers: CowpayFramework.HTTPHeaders? = nil, interceptor: CowpayFramework.RequestInterceptor? = nil, requestModifier: CowpayFramework.Session.RequestModifier? = nil) -> CowpayFramework.DataRequest
  open func request<Parameters>(_ convertible: CowpayFramework.URLConvertible, method: CowpayFramework.HTTPMethod = .get, parameters: Parameters? = nil, encoder: CowpayFramework.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: CowpayFramework.HTTPHeaders? = nil, interceptor: CowpayFramework.RequestInterceptor? = nil, requestModifier: CowpayFramework.Session.RequestModifier? = nil) -> CowpayFramework.DataRequest where Parameters : Swift.Encodable
  open func request(_ convertible: CowpayFramework.URLRequestConvertible, interceptor: CowpayFramework.RequestInterceptor? = nil) -> CowpayFramework.DataRequest
  open func streamRequest<Parameters>(_ convertible: CowpayFramework.URLConvertible, method: CowpayFramework.HTTPMethod = .get, parameters: Parameters? = nil, encoder: CowpayFramework.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: CowpayFramework.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: CowpayFramework.RequestInterceptor? = nil, requestModifier: CowpayFramework.Session.RequestModifier? = nil) -> CowpayFramework.DataStreamRequest where Parameters : Swift.Encodable
  open func streamRequest(_ convertible: CowpayFramework.URLConvertible, method: CowpayFramework.HTTPMethod = .get, headers: CowpayFramework.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: CowpayFramework.RequestInterceptor? = nil, requestModifier: CowpayFramework.Session.RequestModifier? = nil) -> CowpayFramework.DataStreamRequest
  open func streamRequest(_ convertible: CowpayFramework.URLRequestConvertible, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: CowpayFramework.RequestInterceptor? = nil) -> CowpayFramework.DataStreamRequest
  open func download(_ convertible: CowpayFramework.URLConvertible, method: CowpayFramework.HTTPMethod = .get, parameters: CowpayFramework.Parameters? = nil, encoding: CowpayFramework.ParameterEncoding = URLEncoding.default, headers: CowpayFramework.HTTPHeaders? = nil, interceptor: CowpayFramework.RequestInterceptor? = nil, requestModifier: CowpayFramework.Session.RequestModifier? = nil, to destination: CowpayFramework.DownloadRequest.Destination? = nil) -> CowpayFramework.DownloadRequest
  open func download<Parameters>(_ convertible: CowpayFramework.URLConvertible, method: CowpayFramework.HTTPMethod = .get, parameters: Parameters? = nil, encoder: CowpayFramework.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: CowpayFramework.HTTPHeaders? = nil, interceptor: CowpayFramework.RequestInterceptor? = nil, requestModifier: CowpayFramework.Session.RequestModifier? = nil, to destination: CowpayFramework.DownloadRequest.Destination? = nil) -> CowpayFramework.DownloadRequest where Parameters : Swift.Encodable
  open func download(_ convertible: CowpayFramework.URLRequestConvertible, interceptor: CowpayFramework.RequestInterceptor? = nil, to destination: CowpayFramework.DownloadRequest.Destination? = nil) -> CowpayFramework.DownloadRequest
  open func download(resumingWith data: Foundation.Data, interceptor: CowpayFramework.RequestInterceptor? = nil, to destination: CowpayFramework.DownloadRequest.Destination? = nil) -> CowpayFramework.DownloadRequest
  open func upload(_ data: Foundation.Data, to convertible: CowpayFramework.URLConvertible, method: CowpayFramework.HTTPMethod = .post, headers: CowpayFramework.HTTPHeaders? = nil, interceptor: CowpayFramework.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: CowpayFramework.Session.RequestModifier? = nil) -> CowpayFramework.UploadRequest
  open func upload(_ data: Foundation.Data, with convertible: CowpayFramework.URLRequestConvertible, interceptor: CowpayFramework.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> CowpayFramework.UploadRequest
  open func upload(_ fileURL: Foundation.URL, to convertible: CowpayFramework.URLConvertible, method: CowpayFramework.HTTPMethod = .post, headers: CowpayFramework.HTTPHeaders? = nil, interceptor: CowpayFramework.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: CowpayFramework.Session.RequestModifier? = nil) -> CowpayFramework.UploadRequest
  open func upload(_ fileURL: Foundation.URL, with convertible: CowpayFramework.URLRequestConvertible, interceptor: CowpayFramework.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> CowpayFramework.UploadRequest
  open func upload(_ stream: Foundation.InputStream, to convertible: CowpayFramework.URLConvertible, method: CowpayFramework.HTTPMethod = .post, headers: CowpayFramework.HTTPHeaders? = nil, interceptor: CowpayFramework.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: CowpayFramework.Session.RequestModifier? = nil) -> CowpayFramework.UploadRequest
  open func upload(_ stream: Foundation.InputStream, with convertible: CowpayFramework.URLRequestConvertible, interceptor: CowpayFramework.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> CowpayFramework.UploadRequest
  open func upload(multipartFormData: @escaping (CowpayFramework.MultipartFormData) -> Swift.Void, to url: CowpayFramework.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: CowpayFramework.HTTPMethod = .post, headers: CowpayFramework.HTTPHeaders? = nil, interceptor: CowpayFramework.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: CowpayFramework.Session.RequestModifier? = nil) -> CowpayFramework.UploadRequest
  open func upload(multipartFormData: @escaping (CowpayFramework.MultipartFormData) -> Swift.Void, with request: CowpayFramework.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: CowpayFramework.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> CowpayFramework.UploadRequest
  open func upload(multipartFormData: CowpayFramework.MultipartFormData, to url: CowpayFramework.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: CowpayFramework.HTTPMethod = .post, headers: CowpayFramework.HTTPHeaders? = nil, interceptor: CowpayFramework.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: CowpayFramework.Session.RequestModifier? = nil) -> CowpayFramework.UploadRequest
  open func upload(multipartFormData: CowpayFramework.MultipartFormData, with request: CowpayFramework.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: CowpayFramework.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> CowpayFramework.UploadRequest
}
extension CowpayFramework.Session : CowpayFramework.RequestDelegate {
  public var sessionConfiguration: Foundation.URLSessionConfiguration {
    get
  }
  public var startImmediately: Swift.Bool {
    get
  }
  public func cleanup(after request: CowpayFramework.Request)
  public func retryResult(for request: CowpayFramework.Request, dueTo error: CowpayFramework.AFError, completion: @escaping (CowpayFramework.RetryResult) -> Swift.Void)
  public func retryRequest(_ request: CowpayFramework.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
@_hasMissingDesignatedInitializers public class Request {
  public enum State {
    case initialized
    case resumed
    case suspended
    case cancelled
    case finished
    public static func == (a: CowpayFramework.Request.State, b: CowpayFramework.Request.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let id: Foundation.UUID
  final public let underlyingQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let eventMonitor: CowpayFramework.EventMonitor?
  final public let interceptor: CowpayFramework.RequestInterceptor?
  weak public var delegate: CowpayFramework.RequestDelegate? {
    get
  }
  public var state: CowpayFramework.Request.State {
    get
  }
  public var isInitialized: Swift.Bool {
    get
  }
  public var isResumed: Swift.Bool {
    get
  }
  public var isSuspended: Swift.Bool {
    get
  }
  public var isCancelled: Swift.Bool {
    get
  }
  public var isFinished: Swift.Bool {
    get
  }
  public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
  final public let uploadProgress: Foundation.Progress
  final public let downloadProgress: Foundation.Progress
  public var redirectHandler: CowpayFramework.RedirectHandler? {
    get
  }
  public var cachedResponseHandler: CowpayFramework.CachedResponseHandler? {
    get
  }
  public var credential: Foundation.URLCredential? {
    get
  }
  public var requests: [Foundation.URLRequest] {
    get
  }
  public var firstRequest: Foundation.URLRequest? {
    get
  }
  public var lastRequest: Foundation.URLRequest? {
    get
  }
  public var request: Foundation.URLRequest? {
    get
  }
  public var performedRequests: [Foundation.URLRequest] {
    get
  }
  public var response: Foundation.HTTPURLResponse? {
    get
  }
  public var tasks: [Foundation.URLSessionTask] {
    get
  }
  public var firstTask: Foundation.URLSessionTask? {
    get
  }
  public var lastTask: Foundation.URLSessionTask? {
    get
  }
  public var task: Foundation.URLSessionTask? {
    get
  }
  public var allMetrics: [Foundation.URLSessionTaskMetrics] {
    get
  }
  public var firstMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var lastMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var retryCount: Swift.Int {
    get
  }
  public var error: CowpayFramework.AFError? {
    get
  }
  @discardableResult
  public func cancel() -> Self
  @discardableResult
  public func suspend() -> Self
  @discardableResult
  public func resume() -> Self
  @discardableResult
  public func authenticate(username: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession) -> Self
  @discardableResult
  public func authenticate(with credential: Foundation.URLCredential) -> Self
  @discardableResult
  public func downloadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping CowpayFramework.Request.ProgressHandler) -> Self
  @discardableResult
  public func uploadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping CowpayFramework.Request.ProgressHandler) -> Self
  @discardableResult
  public func redirect(using handler: CowpayFramework.RedirectHandler) -> Self
  @discardableResult
  public func cacheResponse(using handler: CowpayFramework.CachedResponseHandler) -> Self
  @discardableResult
  public func cURLDescription(on queue: Dispatch.DispatchQueue, calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @discardableResult
  public func cURLDescription(calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @discardableResult
  public func onURLRequestCreation(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.URLRequest) -> Swift.Void) -> Self
  @discardableResult
  public func onURLSessionTaskCreation(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.URLSessionTask) -> Swift.Void) -> Self
  @objc deinit
}
extension CowpayFramework.Request : Swift.Equatable {
  public static func == (lhs: CowpayFramework.Request, rhs: CowpayFramework.Request) -> Swift.Bool
}
extension CowpayFramework.Request : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CowpayFramework.Request : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension CowpayFramework.Request {
  public func cURLDescription() -> Swift.String
}
public protocol RequestDelegate : AnyObject {
  var sessionConfiguration: Foundation.URLSessionConfiguration { get }
  var startImmediately: Swift.Bool { get }
  func cleanup(after request: CowpayFramework.Request)
  func retryResult(for request: CowpayFramework.Request, dueTo error: CowpayFramework.AFError, completion: @escaping (CowpayFramework.RetryResult) -> Swift.Void)
  func retryRequest(_ request: CowpayFramework.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
@_hasMissingDesignatedInitializers public class DataRequest : CowpayFramework.Request {
  final public let convertible: CowpayFramework.URLRequestConvertible
  public var data: Foundation.Data? {
    get
  }
  @discardableResult
  public func validate(_ validation: @escaping CowpayFramework.DataRequest.Validation) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DataStreamRequest : CowpayFramework.Request {
  public typealias Handler<Success, Failure> = (CowpayFramework.DataStreamRequest.Stream<Success, Failure>) throws -> Swift.Void where Failure : Swift.Error
  public struct Stream<Success, Failure> where Failure : Swift.Error {
    public let event: CowpayFramework.DataStreamRequest.Event<Success, Failure>
    public let token: CowpayFramework.DataStreamRequest.CancellationToken
    public func cancel()
  }
  public enum Event<Success, Failure> where Failure : Swift.Error {
    case stream(Swift.Result<Success, Failure>)
    case complete(CowpayFramework.DataStreamRequest.Completion)
  }
  public struct Completion {
    public let request: Foundation.URLRequest?
    public let response: Foundation.HTTPURLResponse?
    public let metrics: Foundation.URLSessionTaskMetrics?
    public let error: CowpayFramework.AFError?
  }
  public struct CancellationToken {
    public func cancel()
  }
  final public let convertible: CowpayFramework.URLRequestConvertible
  final public let automaticallyCancelOnStreamError: Swift.Bool
  @discardableResult
  final public func validate(_ validation: @escaping CowpayFramework.DataStreamRequest.Validation) -> Self
  final public func asInputStream(bufferSize: Swift.Int = 1024) -> Foundation.InputStream?
  @objc deinit
}
extension CowpayFramework.DataStreamRequest.Stream {
  public var result: Swift.Result<Success, Failure>? {
    get
  }
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public var completion: CowpayFramework.DataStreamRequest.Completion? {
    get
  }
}
@_hasMissingDesignatedInitializers public class DownloadRequest : CowpayFramework.Request {
  public struct Options : Swift.OptionSet {
    public static let createIntermediateDirectories: CowpayFramework.DownloadRequest.Options
    public static let removePreviousFile: CowpayFramework.DownloadRequest.Options
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = CowpayFramework.DownloadRequest.Options
    public typealias Element = CowpayFramework.DownloadRequest.Options
    public typealias RawValue = Swift.Int
  }
  public typealias Destination = (_ temporaryURL: Foundation.URL, _ response: Foundation.HTTPURLResponse) -> (destinationURL: Foundation.URL, options: CowpayFramework.DownloadRequest.Options)
  public class func suggestedDownloadDestination(for directory: Foundation.FileManager.SearchPathDirectory = .documentDirectory, in domain: Foundation.FileManager.SearchPathDomainMask = .userDomainMask, options: CowpayFramework.DownloadRequest.Options = []) -> CowpayFramework.DownloadRequest.Destination
  public enum Downloadable {
    case request(CowpayFramework.URLRequestConvertible)
    case resumeData(Foundation.Data)
  }
  public var resumeData: Foundation.Data? {
    get
  }
  public var fileURL: Foundation.URL? {
    get
  }
  final public let downloadable: CowpayFramework.DownloadRequest.Downloadable
  public func task(forResumeData data: Foundation.Data, using session: Foundation.URLSession) -> Foundation.URLSessionTask
  @discardableResult
  override public func cancel() -> Self
  @discardableResult
  public func cancel(producingResumeData shouldProduceResumeData: Swift.Bool) -> Self
  @discardableResult
  public func cancel(byProducingResumeData completionHandler: @escaping (_ data: Foundation.Data?) -> Swift.Void) -> Self
  @discardableResult
  public func validate(_ validation: @escaping CowpayFramework.DownloadRequest.Validation) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UploadRequest : CowpayFramework.DataRequest {
  public enum Uploadable {
    case data(Foundation.Data)
    case file(Foundation.URL, shouldRemove: Swift.Bool)
    case stream(Foundation.InputStream)
  }
  final public let upload: CowpayFramework.UploadableConvertible
  final public let fileManager: Foundation.FileManager
  public var uploadable: CowpayFramework.UploadRequest.Uploadable?
  public func cleanup()
  @objc deinit
}
public protocol UploadableConvertible {
  func createUploadable() throws -> CowpayFramework.UploadRequest.Uploadable
}
extension CowpayFramework.UploadRequest.Uploadable : CowpayFramework.UploadableConvertible {
  public func createUploadable() throws -> CowpayFramework.UploadRequest.Uploadable
}
public protocol UploadConvertible : CowpayFramework.URLRequestConvertible, CowpayFramework.UploadableConvertible {
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = CowpayFramework.DataResponse<Value, CowpayFramework.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: CowpayFramework.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : CowpayFramework.ResponseSerializer
  public init<Serializer>(_ request: CowpayFramework.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : CowpayFramework.DataResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, CowpayFramework.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, CowpayFramework.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == CowpayFramework.DataResponse<Value, CowpayFramework.AFError>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension CowpayFramework.DataResponsePublisher where Value == Foundation.Data? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: CowpayFramework.DataRequest, queue: Dispatch.DispatchQueue)
}
extension CowpayFramework.DataRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> CowpayFramework.DataResponsePublisher<T> where Serializer : CowpayFramework.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: CowpayFramework.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> CowpayFramework.DataResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: CowpayFramework.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> CowpayFramework.DataResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: CowpayFramework.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: CowpayFramework.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<CowpayFramework.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> CowpayFramework.DataResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(queue: Dispatch.DispatchQueue = .main) -> CowpayFramework.DataResponsePublisher<Foundation.Data?>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataStreamPublisher<Value> : Combine.Publisher {
  public typealias Output = CowpayFramework.DataStreamRequest.Stream<Value, CowpayFramework.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: CowpayFramework.DataStreamRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : CowpayFramework.DataStreamSerializer
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, CowpayFramework.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, CowpayFramework.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == CowpayFramework.DataStreamRequest.Stream<Value, CowpayFramework.AFError>
}
extension CowpayFramework.DataStreamRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> CowpayFramework.DataStreamPublisher<Serializer.SerializedObject> where Serializer : CowpayFramework.DataStreamSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishData(queue: Dispatch.DispatchQueue = .main) -> CowpayFramework.DataStreamPublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishString(queue: Dispatch.DispatchQueue = .main) -> CowpayFramework.DataStreamPublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, decoder: CowpayFramework.DataDecoder = JSONDecoder(), preprocessor: CowpayFramework.DataPreprocessor = PassthroughPreprocessor()) -> CowpayFramework.DataStreamPublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DownloadResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = CowpayFramework.DownloadResponse<Value, CowpayFramework.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: CowpayFramework.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : CowpayFramework.ResponseSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init<Serializer>(_ request: CowpayFramework.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : CowpayFramework.DownloadResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, CowpayFramework.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, CowpayFramework.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == CowpayFramework.DownloadResponse<Value, CowpayFramework.AFError>
}
extension CowpayFramework.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> CowpayFramework.DownloadResponsePublisher<T> where Serializer : CowpayFramework.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> CowpayFramework.DownloadResponsePublisher<T> where Serializer : CowpayFramework.DownloadResponseSerializerProtocol, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishURL(queue: Dispatch.DispatchQueue = .main) -> CowpayFramework.DownloadResponsePublisher<Foundation.URL>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: CowpayFramework.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> CowpayFramework.DownloadResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: CowpayFramework.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<CowpayFramework.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> CowpayFramework.DownloadResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: CowpayFramework.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: CowpayFramework.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<CowpayFramework.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> CowpayFramework.DownloadResponsePublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension CowpayFramework.DownloadResponsePublisher where Value == Foundation.URL? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: CowpayFramework.DownloadRequest, queue: Dispatch.DispatchQueue)
}
extension CowpayFramework.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(on queue: Dispatch.DispatchQueue = .main) -> CowpayFramework.DownloadResponsePublisher<Foundation.URL?>
}
public struct AlamofireExtension<ExtendedType> {
  public var type: ExtendedType {
    get
  }
  public init(_ type: ExtendedType)
}
public protocol AlamofireExtended {
  associatedtype ExtendedType
  static var af: CowpayFramework.AlamofireExtension<Self.ExtendedType>.Type { get set }
  var af: CowpayFramework.AlamofireExtension<Self.ExtendedType> { get set }
}
extension CowpayFramework.AlamofireExtended {
  public static var af: CowpayFramework.AlamofireExtension<Self>.Type {
    get
    set
  }
  public var af: CowpayFramework.AlamofireExtension<Self> {
    get
    set
  }
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
}
public enum AFError : Swift.Error {
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: Swift.Error)
    case inputStreamReadFailed(error: Swift.Error)
  }
  public struct UnexpectedInputStreamLength : Swift.Error {
    public var bytesExpected: Swift.UInt64
    public var bytesRead: Swift.UInt64
  }
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: Swift.Error)
    case customEncodingFailed(error: Swift.Error)
  }
  public enum ParameterEncoderFailureReason {
    public enum RequiredComponent {
      case url
      case httpMethod(rawValue: Swift.String)
    }
    case missingRequiredComponent(CowpayFramework.AFError.ParameterEncoderFailureReason.RequiredComponent)
    case encoderFailed(error: Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
    case customValidationFailed(error: Swift.Error)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: Swift.Error)
    case decodingFailed(error: Swift.Error)
    case customSerializationFailed(error: Swift.Error)
    case invalidEmptyResponse(type: Swift.String)
  }
  public enum ServerTrustFailureReason {
    public struct Output {
      public let host: Swift.String
      public let trust: Security.SecTrust
      public let status: Darwin.OSStatus
      public let result: Security.SecTrustResultType
    }
    case noRequiredEvaluator(host: Swift.String)
    case noCertificatesFound
    case noPublicKeysFound
    case policyApplicationFailed(trust: Security.SecTrust, policy: Security.SecPolicy, status: Darwin.OSStatus)
    case settingAnchorCertificatesFailed(status: Darwin.OSStatus, certificates: [Security.SecCertificate])
    case revocationPolicyCreationFailed
    case trustEvaluationFailed(error: Swift.Error?)
    case defaultEvaluationFailed(output: CowpayFramework.AFError.ServerTrustFailureReason.Output)
    case hostValidationFailed(output: CowpayFramework.AFError.ServerTrustFailureReason.Output)
    case revocationCheckFailed(output: CowpayFramework.AFError.ServerTrustFailureReason.Output, options: CowpayFramework.RevocationTrustEvaluator.Options)
    case certificatePinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedCertificates: [Security.SecCertificate], serverCertificates: [Security.SecCertificate])
    case publicKeyPinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedKeys: [Security.SecKey], serverKeys: [Security.SecKey])
    case customEvaluationFailed(error: Swift.Error)
  }
  public enum URLRequestValidationFailureReason {
    case bodyDataInGETRequest(Foundation.Data)
  }
  case createUploadableFailed(error: Swift.Error)
  case createURLRequestFailed(error: Swift.Error)
  case downloadedFileMoveFailed(error: Swift.Error, source: Foundation.URL, destination: Foundation.URL)
  case explicitlyCancelled
  case invalidURL(url: CowpayFramework.URLConvertible)
  case multipartEncodingFailed(reason: CowpayFramework.AFError.MultipartEncodingFailureReason)
  case parameterEncodingFailed(reason: CowpayFramework.AFError.ParameterEncodingFailureReason)
  case parameterEncoderFailed(reason: CowpayFramework.AFError.ParameterEncoderFailureReason)
  case requestAdaptationFailed(error: Swift.Error)
  case requestRetryFailed(retryError: Swift.Error, originalError: Swift.Error)
  case responseValidationFailed(reason: CowpayFramework.AFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: CowpayFramework.AFError.ResponseSerializationFailureReason)
  case serverTrustEvaluationFailed(reason: CowpayFramework.AFError.ServerTrustFailureReason)
  case sessionDeinitialized
  case sessionInvalidated(error: Swift.Error?)
  case sessionTaskFailed(error: Swift.Error)
  case urlRequestValidationFailed(reason: CowpayFramework.AFError.URLRequestValidationFailureReason)
}
extension Swift.Error {
  public var asAFError: CowpayFramework.AFError? {
    get
  }
  public func asAFError(orFailWith message: @autoclosure () -> Swift.String, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> CowpayFramework.AFError
}
extension CowpayFramework.AFError {
  public var isSessionDeinitializedError: Swift.Bool {
    get
  }
  public var isSessionInvalidatedError: Swift.Bool {
    get
  }
  public var isExplicitlyCancelledError: Swift.Bool {
    get
  }
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isParameterEncoderError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isRequestAdaptationError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
  public var isServerTrustEvaluationError: Swift.Bool {
    get
  }
  public var isRequestRetryError: Swift.Bool {
    get
  }
  public var isCreateUploadableError: Swift.Bool {
    get
  }
  public var isCreateURLRequestError: Swift.Bool {
    get
  }
  public var isDownloadedFileMoveError: Swift.Bool {
    get
  }
  public var isSessionTaskError: Swift.Bool {
    get
  }
}
extension CowpayFramework.AFError {
  public var urlConvertible: CowpayFramework.URLConvertible? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: Swift.Error? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
  public var sourceURL: Foundation.URL? {
    get
  }
  public var destinationURL: Foundation.URL? {
    get
  }
  public var downloadResumeData: Foundation.Data? {
    get
  }
}
extension CowpayFramework.AFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc open class SessionDelegate : ObjectiveC.NSObject {
  public init(fileManager: Foundation.FileManager = .default)
  @objc deinit
}
extension CowpayFramework.SessionDelegate : Foundation.URLSessionDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
}
extension CowpayFramework.SessionDelegate : Foundation.URLSessionTaskDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, needNewBodyStream completionHandler: @escaping (Foundation.InputStream?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
}
extension CowpayFramework.SessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension CowpayFramework.SessionDelegate : Foundation.URLSessionDownloadDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
}
extension CowpayFramework.Request {
  public typealias ValidationResult = Swift.Result<Swift.Void, Swift.Error>
}
extension CowpayFramework.DataRequest {
  public typealias Validation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?) -> CowpayFramework.DataRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension CowpayFramework.DataStreamRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse) -> CowpayFramework.DataStreamRequest.ValidationResult
  @discardableResult
  final public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  final public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  final public func validate() -> Self
}
extension CowpayFramework.DownloadRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse, _ fileURL: Foundation.URL?) -> CowpayFramework.DownloadRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
@_hasMissingDesignatedInitializers public class CowpaySDK {
  public static var token: Swift.String
  public static var merchantCode: Swift.String
  public static var haskey: Swift.String
  public static var enviroment: CowpayFramework.Enviroment
  public static var paymentMethodAvailability: [CowpayFramework.CowpaySDKPaymentMethod]
  public static var paymentInfo: CowpayFramework.PaymentInfo?
  public static func getUrl() -> Swift.String
  public static func getUrlForm() -> Swift.String
  @objc deinit
}
public enum Enviroment {
  case staging
  case live
  public static func == (a: CowpayFramework.Enviroment, b: CowpayFramework.Enviroment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Language {
  case en
  case ar
  public static func == (a: CowpayFramework.Language, b: CowpayFramework.Language) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CowpaySDKPaymentMethod {
  case CARD
  case FAWRY
  case CASH_COLLECTION
  public static func == (a: CowpayFramework.CowpaySDKPaymentMethod, b: CowpayFramework.CowpaySDKPaymentMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.URLRequest {
  public var method: CowpayFramework.HTTPMethod? {
    get
    set
  }
  public func validate() throws
}
public protocol CowpayCallback {
  func successByFawry(fawry: CowpayFramework.Fawry?)
  func successByCard(card: CowpayFramework.Card?)
  func error()
  func successByCashCollection(cashCollection: CowpayFramework.CashCollection?)
  func closeByUser()
}
public typealias AFResult<Success> = Swift.Result<Success, CowpayFramework.AFError>
public struct Fawry {
  public var paymentGatewayReferenceId: Swift.String
  public var merchantReferenceId: Swift.String
  public var cowpayReferenceId: Swift.Int
}
public protocol RedirectHandler {
  func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
public struct Redirector {
  public enum Behavior {
    case follow
    case doNotFollow
    case modify((Foundation.URLSessionTask, Foundation.URLRequest, Foundation.HTTPURLResponse) -> Foundation.URLRequest?)
  }
  public static let follow: CowpayFramework.Redirector
  public static let doNotFollow: CowpayFramework.Redirector
  public let behavior: CowpayFramework.Redirector.Behavior
  public init(behavior: CowpayFramework.Redirector.Behavior)
}
extension CowpayFramework.Redirector : CowpayFramework.RedirectHandler {
  public func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
public protocol ParameterEncoder {
  func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
}
open class JSONParameterEncoder : CowpayFramework.ParameterEncoder {
  public static var `default`: CowpayFramework.JSONParameterEncoder {
    get
  }
  public static var prettyPrinted: CowpayFramework.JSONParameterEncoder {
    get
  }
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  public static var sortedKeys: CowpayFramework.JSONParameterEncoder {
    get
  }
  final public let encoder: Foundation.JSONEncoder
  public init(encoder: Foundation.JSONEncoder = JSONEncoder())
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
open class URLEncodedFormParameterEncoder : CowpayFramework.ParameterEncoder {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: CowpayFramework.URLEncodedFormParameterEncoder.Destination, b: CowpayFramework.URLEncodedFormParameterEncoder.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: CowpayFramework.URLEncodedFormParameterEncoder {
    get
  }
  final public let encoder: CowpayFramework.URLEncodedFormEncoder
  final public let destination: CowpayFramework.URLEncodedFormParameterEncoder.Destination
  public init(encoder: CowpayFramework.URLEncodedFormEncoder = URLEncodedFormEncoder(), destination: CowpayFramework.URLEncodedFormParameterEncoder.Destination = .methodDependent)
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
public protocol AuthenticationCredential {
  var requiresRefresh: Swift.Bool { get }
}
public protocol Authenticator : AnyObject {
  associatedtype Credential : CowpayFramework.AuthenticationCredential
  func apply(_ credential: Self.Credential, to urlRequest: inout Foundation.URLRequest)
  func refresh(_ credential: Self.Credential, for session: CowpayFramework.Session, completion: @escaping (Swift.Result<Self.Credential, Swift.Error>) -> Swift.Void)
  func didRequest(_ urlRequest: Foundation.URLRequest, with response: Foundation.HTTPURLResponse, failDueToAuthenticationError error: Swift.Error) -> Swift.Bool
  func isRequest(_ urlRequest: Foundation.URLRequest, authenticatedWith credential: Self.Credential) -> Swift.Bool
}
public enum AuthenticationError : Swift.Error {
  case missingCredential
  case excessiveRefresh
  public static func == (a: CowpayFramework.AuthenticationError, b: CowpayFramework.AuthenticationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class AuthenticationInterceptor<AuthenticatorType> : CowpayFramework.RequestInterceptor where AuthenticatorType : CowpayFramework.Authenticator {
  public typealias Credential = AuthenticatorType.Credential
  public struct RefreshWindow {
    public let interval: Foundation.TimeInterval
    public let maximumAttempts: Swift.Int
    public init(interval: Foundation.TimeInterval = 30.0, maximumAttempts: Swift.Int = 5)
  }
  public var credential: CowpayFramework.AuthenticationInterceptor<AuthenticatorType>.Credential? {
    get
    set
  }
  public init(authenticator: AuthenticatorType, credential: CowpayFramework.AuthenticationInterceptor<AuthenticatorType>.Credential? = nil, refreshWindow: CowpayFramework.AuthenticationInterceptor<AuthenticatorType>.RefreshWindow? = RefreshWindow())
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: CowpayFramework.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  public func retry(_ request: CowpayFramework.Request, for session: CowpayFramework.Session, dueTo error: Swift.Error, completion: @escaping (CowpayFramework.RetryResult) -> Swift.Void)
  @objc deinit
}
final public class URLEncodedFormEncoder {
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    public static func == (a: CowpayFramework.URLEncodedFormEncoder.ArrayEncoding, b: CowpayFramework.URLEncodedFormEncoder.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: CowpayFramework.URLEncodedFormEncoder.BoolEncoding, b: CowpayFramework.URLEncodedFormEncoder.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DataEncoding {
    case deferredToData
    case base64
    case custom((Foundation.Data) throws -> Swift.String)
  }
  public enum DateEncoding {
    case deferredToDate
    case secondsSince1970
    case millisecondsSince1970
    case iso8601
    case formatted(Foundation.DateFormatter)
    case custom((Foundation.Date) throws -> Swift.String)
  }
  public enum KeyEncoding {
    case useDefaultKeys
    case convertToSnakeCase
    case convertToKebabCase
    case capitalized
    case uppercased
    case lowercased
    case custom((Swift.String) -> Swift.String)
  }
  public enum SpaceEncoding {
    case percentEscaped
    case plusReplaced
    public static func == (a: CowpayFramework.URLEncodedFormEncoder.SpaceEncoding, b: CowpayFramework.URLEncodedFormEncoder.SpaceEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Error : Swift.Error {
    case invalidRootObject(Swift.String)
  }
  final public let alphabetizeKeyValuePairs: Swift.Bool
  final public let arrayEncoding: CowpayFramework.URLEncodedFormEncoder.ArrayEncoding
  final public let boolEncoding: CowpayFramework.URLEncodedFormEncoder.BoolEncoding
  final public let dataEncoding: CowpayFramework.URLEncodedFormEncoder.DataEncoding
  final public let dateEncoding: CowpayFramework.URLEncodedFormEncoder.DateEncoding
  final public let keyEncoding: CowpayFramework.URLEncodedFormEncoder.KeyEncoding
  final public let spaceEncoding: CowpayFramework.URLEncodedFormEncoder.SpaceEncoding
  final public var allowedCharacters: Foundation.CharacterSet
  public init(alphabetizeKeyValuePairs: Swift.Bool = true, arrayEncoding: CowpayFramework.URLEncodedFormEncoder.ArrayEncoding = .brackets, boolEncoding: CowpayFramework.URLEncodedFormEncoder.BoolEncoding = .numeric, dataEncoding: CowpayFramework.URLEncodedFormEncoder.DataEncoding = .base64, dateEncoding: CowpayFramework.URLEncodedFormEncoder.DateEncoding = .deferredToDate, keyEncoding: CowpayFramework.URLEncodedFormEncoder.KeyEncoding = .useDefaultKeys, spaceEncoding: CowpayFramework.URLEncodedFormEncoder.SpaceEncoding = .percentEscaped, allowedCharacters: Foundation.CharacterSet = .afURLQueryAllowed)
  final public func encode(_ value: Swift.Encodable) throws -> Swift.String
  final public func encode(_ value: Swift.Encodable) throws -> Foundation.Data
  @objc deinit
}
extension Foundation.CharacterSet {
  public static let afURLQueryAllowed: Foundation.CharacterSet
}
public struct HTTPHeaders {
  public init()
  public init(_ headers: [CowpayFramework.HTTPHeader])
  public init(_ dictionary: [Swift.String : Swift.String])
  public mutating func add(name: Swift.String, value: Swift.String)
  public mutating func add(_ header: CowpayFramework.HTTPHeader)
  public mutating func update(name: Swift.String, value: Swift.String)
  public mutating func update(_ header: CowpayFramework.HTTPHeader)
  public mutating func remove(name: Swift.String)
  public mutating func sort()
  public func sorted() -> CowpayFramework.HTTPHeaders
  public func value(for name: Swift.String) -> Swift.String?
  public subscript(name: Swift.String) -> Swift.String? {
    get
    set
  }
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
}
extension CowpayFramework.HTTPHeaders : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Swift.String)...)
  public typealias Key = Swift.String
  public typealias Value = Swift.String
}
extension CowpayFramework.HTTPHeaders : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: CowpayFramework.HTTPHeader...)
  public typealias ArrayLiteralElement = CowpayFramework.HTTPHeader
}
extension CowpayFramework.HTTPHeaders : Swift.Sequence {
  public func makeIterator() -> Swift.IndexingIterator<[CowpayFramework.HTTPHeader]>
}
extension CowpayFramework.HTTPHeaders : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> CowpayFramework.HTTPHeader {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Element = CowpayFramework.HTTPHeader
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<CowpayFramework.HTTPHeaders>
  public typealias Iterator = Swift.IndexingIterator<[CowpayFramework.HTTPHeader]>
  public typealias SubSequence = Swift.Slice<CowpayFramework.HTTPHeaders>
}
extension CowpayFramework.HTTPHeaders : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct HTTPHeader : Swift.Hashable {
  public let name: Swift.String
  public let value: Swift.String
  public init(name: Swift.String, value: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: CowpayFramework.HTTPHeader, b: CowpayFramework.HTTPHeader) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension CowpayFramework.HTTPHeader : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension CowpayFramework.HTTPHeader {
  public static func accept(_ value: Swift.String) -> CowpayFramework.HTTPHeader
  public static func acceptCharset(_ value: Swift.String) -> CowpayFramework.HTTPHeader
  public static func acceptLanguage(_ value: Swift.String) -> CowpayFramework.HTTPHeader
  public static func acceptEncoding(_ value: Swift.String) -> CowpayFramework.HTTPHeader
  public static func authorization(username: Swift.String, password: Swift.String) -> CowpayFramework.HTTPHeader
  public static func authorization(bearerToken: Swift.String) -> CowpayFramework.HTTPHeader
  public static func authorization(_ value: Swift.String) -> CowpayFramework.HTTPHeader
  public static func contentDisposition(_ value: Swift.String) -> CowpayFramework.HTTPHeader
  public static func contentType(_ value: Swift.String) -> CowpayFramework.HTTPHeader
  public static func userAgent(_ value: Swift.String) -> CowpayFramework.HTTPHeader
}
extension CowpayFramework.HTTPHeaders {
  public static let `default`: CowpayFramework.HTTPHeaders
}
extension CowpayFramework.HTTPHeader {
  public static let defaultAcceptEncoding: CowpayFramework.HTTPHeader
  public static let defaultAcceptLanguage: CowpayFramework.HTTPHeader
  public static let defaultUserAgent: CowpayFramework.HTTPHeader
}
extension Foundation.URLRequest {
  public var headers: CowpayFramework.HTTPHeaders {
    get
    set
  }
}
extension Foundation.HTTPURLResponse {
  public var headers: CowpayFramework.HTTPHeaders {
    get
  }
}
extension Foundation.URLSessionConfiguration {
  public var headers: CowpayFramework.HTTPHeaders {
    get
    set
  }
}
public struct PaymentInfo {
  public var merchantReferenceId: Swift.String
  public var customerMerchantProfileId: Swift.String
  public var amount: Swift.String
  public var description: Swift.String
  public var customerName: Swift.String
  public var customerEmail: Swift.String
  public var customerMobile: Swift.String
  public init(merchantReferenceId: Swift.String, customerMerchantProfileId: Swift.String, amount: Swift.String, description: Swift.String, customerName: Swift.String, customerEmail: Swift.String, customerMobile: Swift.String)
}
public protocol URLConvertible {
  func asURL() throws -> Foundation.URL
}
extension Swift.String : CowpayFramework.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URL : CowpayFramework.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URLComponents : CowpayFramework.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
public protocol URLRequestConvertible {
  func asURLRequest() throws -> Foundation.URLRequest
}
extension CowpayFramework.URLRequestConvertible {
  public var urlRequest: Foundation.URLRequest? {
    get
  }
}
extension Foundation.URLRequest : CowpayFramework.URLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
extension Foundation.URLRequest {
  public init(url: CowpayFramework.URLConvertible, method: CowpayFramework.HTTPMethod, headers: CowpayFramework.HTTPHeaders? = nil) throws
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoding {
  func encode(_ urlRequest: CowpayFramework.URLRequestConvertible, with parameters: CowpayFramework.Parameters?) throws -> Foundation.URLRequest
}
public struct URLEncoding : CowpayFramework.ParameterEncoding {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: CowpayFramework.URLEncoding.Destination, b: CowpayFramework.URLEncoding.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    public static func == (a: CowpayFramework.URLEncoding.ArrayEncoding, b: CowpayFramework.URLEncoding.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: CowpayFramework.URLEncoding.BoolEncoding, b: CowpayFramework.URLEncoding.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: CowpayFramework.URLEncoding {
    get
  }
  public static var queryString: CowpayFramework.URLEncoding {
    get
  }
  public static var httpBody: CowpayFramework.URLEncoding {
    get
  }
  public let destination: CowpayFramework.URLEncoding.Destination
  public let arrayEncoding: CowpayFramework.URLEncoding.ArrayEncoding
  public let boolEncoding: CowpayFramework.URLEncoding.BoolEncoding
  public init(destination: CowpayFramework.URLEncoding.Destination = .methodDependent, arrayEncoding: CowpayFramework.URLEncoding.ArrayEncoding = .brackets, boolEncoding: CowpayFramework.URLEncoding.BoolEncoding = .numeric)
  public func encode(_ urlRequest: CowpayFramework.URLRequestConvertible, with parameters: CowpayFramework.Parameters?) throws -> Foundation.URLRequest
  public func queryComponents(fromKey key: Swift.String, value: Any) -> [(Swift.String, Swift.String)]
  public func escape(_ string: Swift.String) -> Swift.String
}
public struct JSONEncoding : CowpayFramework.ParameterEncoding {
  public static var `default`: CowpayFramework.JSONEncoding {
    get
  }
  public static var prettyPrinted: CowpayFramework.JSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: CowpayFramework.URLRequestConvertible, with parameters: CowpayFramework.Parameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: CowpayFramework.URLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
public struct CashCollection {
  public var paymentGatewayReferenceId: Swift.String
  public var merchantReferenceId: Swift.String
  public var cowpayReferenceId: Swift.Int
}
open class RetryPolicy : CowpayFramework.RequestInterceptor {
  public static let defaultRetryLimit: Swift.UInt
  public static let defaultExponentialBackoffBase: Swift.UInt
  public static let defaultExponentialBackoffScale: Swift.Double
  public static let defaultRetryableHTTPMethods: Swift.Set<CowpayFramework.HTTPMethod>
  public static let defaultRetryableHTTPStatusCodes: Swift.Set<Swift.Int>
  public static let defaultRetryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  final public let retryLimit: Swift.UInt
  final public let exponentialBackoffBase: Swift.UInt
  final public let exponentialBackoffScale: Swift.Double
  final public let retryableHTTPMethods: Swift.Set<CowpayFramework.HTTPMethod>
  final public let retryableHTTPStatusCodes: Swift.Set<Swift.Int>
  final public let retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<CowpayFramework.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods, retryableHTTPStatusCodes: Swift.Set<Swift.Int> = RetryPolicy.defaultRetryableHTTPStatusCodes, retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code> = RetryPolicy.defaultRetryableURLErrorCodes)
  open func retry(_ request: CowpayFramework.Request, for session: CowpayFramework.Session, dueTo error: Swift.Error, completion: @escaping (CowpayFramework.RetryResult) -> Swift.Void)
  open func shouldRetry(request: CowpayFramework.Request, dueTo error: Swift.Error) -> Swift.Bool
  @objc deinit
}
open class ConnectionLostRetryPolicy : CowpayFramework.RetryPolicy {
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<CowpayFramework.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods)
  @objc deinit
}
public struct HTTPMethod : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
  public static let connect: CowpayFramework.HTTPMethod
  public static let delete: CowpayFramework.HTTPMethod
  public static let get: CowpayFramework.HTTPMethod
  public static let head: CowpayFramework.HTTPMethod
  public static let options: CowpayFramework.HTTPMethod
  public static let patch: CowpayFramework.HTTPMethod
  public static let post: CowpayFramework.HTTPMethod
  public static let put: CowpayFramework.HTTPMethod
  public static let trace: CowpayFramework.HTTPMethod
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
@_hasMissingDesignatedInitializers open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(CowpayFramework.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType)
    public enum ConnectionType {
      case ethernetOrWiFi
      case cellular
      public static func == (a: CowpayFramework.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType, b: CowpayFramework.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public typealias Listener = (CowpayFramework.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  public static let `default`: CowpayFramework.NetworkReachabilityManager?
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnCellular: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  final public let reachabilityQueue: Dispatch.DispatchQueue
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var status: CowpayFramework.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening(onQueue queue: Dispatch.DispatchQueue = .main, onUpdatePerforming listener: @escaping CowpayFramework.NetworkReachabilityManager.Listener) -> Swift.Bool
  open func stopListening()
}
extension CowpayFramework.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
  public static func == (a: CowpayFramework.NetworkReachabilityManager.NetworkReachabilityStatus, b: CowpayFramework.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
}
extension UIKit.UIImage {
  public func flippedImageToRight() -> UIKit.UIImage?
  convenience public init?(color: UIKit.UIColor, size: CoreFoundation.CGSize)
}
extension CowpayFramework.Request.State : Swift.Equatable {}
extension CowpayFramework.Request.State : Swift.Hashable {}
extension CowpayFramework.Enviroment : Swift.Equatable {}
extension CowpayFramework.Enviroment : Swift.Hashable {}
extension CowpayFramework.Language : Swift.Equatable {}
extension CowpayFramework.Language : Swift.Hashable {}
extension CowpayFramework.CowpaySDKPaymentMethod : Swift.Equatable {}
extension CowpayFramework.CowpaySDKPaymentMethod : Swift.Hashable {}
extension CowpayFramework.URLEncodedFormParameterEncoder.Destination : Swift.Equatable {}
extension CowpayFramework.URLEncodedFormParameterEncoder.Destination : Swift.Hashable {}
extension CowpayFramework.AuthenticationError : Swift.Equatable {}
extension CowpayFramework.AuthenticationError : Swift.Hashable {}
extension CowpayFramework.URLEncodedFormEncoder.ArrayEncoding : Swift.Equatable {}
extension CowpayFramework.URLEncodedFormEncoder.ArrayEncoding : Swift.Hashable {}
extension CowpayFramework.URLEncodedFormEncoder.BoolEncoding : Swift.Equatable {}
extension CowpayFramework.URLEncodedFormEncoder.BoolEncoding : Swift.Hashable {}
extension CowpayFramework.URLEncodedFormEncoder.SpaceEncoding : Swift.Equatable {}
extension CowpayFramework.URLEncodedFormEncoder.SpaceEncoding : Swift.Hashable {}
extension CowpayFramework.URLEncoding.Destination : Swift.Equatable {}
extension CowpayFramework.URLEncoding.Destination : Swift.Hashable {}
extension CowpayFramework.URLEncoding.ArrayEncoding : Swift.Equatable {}
extension CowpayFramework.URLEncoding.ArrayEncoding : Swift.Hashable {}
extension CowpayFramework.URLEncoding.BoolEncoding : Swift.Equatable {}
extension CowpayFramework.URLEncoding.BoolEncoding : Swift.Hashable {}
extension CowpayFramework.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Equatable {}
extension CowpayFramework.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Hashable {}
